{"version":3,"sources":["containers/App.js","redux/modules/planet/planetAction.js","redux/modules/planet/planetTypes.js","serviceWorker.js","redux/modules/planet/planetStore.js","redux/reducer.js","redux/modules/planet/planetReducer.js","redux/modules/space/spaceReducer.js","redux/modules/spacecraft/spaceCraftReducer.js","redux/store.js","index.js"],"names":["App","className","onClick","props","createPlanet","this","planetReducer","planet","name","React","Component","connect","state","dispatch","planet_name","planetName","type","payload","Promise","resolve","reject","setTimeout","Boolean","window","location","hostname","match","order","reducer","planetStore","action","console","log","spaceReducer","spaceCraftReducer","createStore","combineReducers","applyMiddleware","logger","thunk","promise","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mTAKMA,E,iLACM,IAAD,OACP,OACE,yBAAKC,UAAU,OACb,6BACE,4BAAQC,QAAS,kBAAM,EAAKC,MAAMC,aAAa,YAA/C,cACCC,KAAKF,MAAMG,cAAcC,OAAOC,W,GANzBC,IAAMC,WA+BTC,eAdS,SAACC,GACvB,MAAO,CACLN,cAAeM,EAAMN,kBAIE,SAACO,GAC1B,MAAO,CACLT,aAAc,SAACU,GC5BZ,IAAsBC,ED6BvBF,GC7BuBE,ED6BDD,EC5BnB,CACLE,KCJyB,gBDKzBC,QAAS,IAAIC,SAAQ,SAACC,EAASC,GAC7BC,YAAW,WACTF,EAAQJ,KACP,eD4BMJ,CAA6CX,GGxBxCsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBClBS,GACbnB,OAAQ,CACNC,KAAM,UACNmB,MAAO,ICMIC,EALC,CACdtB,cCFoB,WAAyC,IAAxCM,EAAuC,sEAA1BiB,GAAeC,EAAW,uCAC5D,OAAQA,EAAOd,MACb,IAAI,GAAJ,OJLyB,gBIKzB,cACEe,QAAQC,IAAI,iBACZ,MACF,IJPyB,gBIQvBD,QAAQC,IAAI,iBAKhB,OAAOpB,GDRPqB,aENmB,WAAyB,IAAxBrB,EAAuB,uDAAf,GAAIkB,EAAW,uCAS3C,OARQA,EAAOd,KAQRJ,GFFPsB,kBGPwB,WAAyB,IAAxBtB,EAAuB,uDAAf,GAAIkB,EAAW,uCAShD,OARQA,EAAOd,KAQRJ,I,iCCHMuB,cACbC,YAAgB,eAAIR,IACpB,GACAS,YAAgBC,IAAQC,IAAOC,MCDjCC,IAASC,OACP,kBAAC,IAAD,CAAUC,MAAOA,GACf,kBAAC,EAAD,OAEFC,SAASC,eAAe,SPuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.2f423253.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { connect } from \"react-redux\";\nimport { createPlanet } from \"../redux/modules/planet/planetAction\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div>\n          <button onClick={() => this.props.createPlanet('Planet')}>Add Planet</button>\n          {this.props.planetReducer.planet.name}\n        </div>\n        {/*<a-scene>*/}\n        {/*  <a-sphere position=\"0 1.25 -5\" radius=\"1.25\" color=\"#EF2D5E\"></a-sphere>*/}\n        {/*  <a-sky color=\"#ECECEC\"></a-sky>*/}\n        {/*</a-scene>*/}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    planetReducer: state.planetReducer,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    createPlanet: (planet_name) => {\n      dispatch(createPlanet(planet_name));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { CREATE_PLANET } from \"./planetTypes\";\n\nexport function createPlanet(planetName) {\n  return {\n    type: CREATE_PLANET,\n    payload: new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve(planetName);\n      }, 3000);\n    })\n  };\n}","export const CREATE_PLANET = 'CREATE_PLANET';\nexport const DELETE_PLANET = 'DELETE_PLANET';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export default {\n  planet: {\n    name: 'Mercury',\n    order: 1,\n  },\n};","import planetReducer from \"./modules/planet/planetReducer\";\nimport spaceReducer from \"./modules/space/spaceReducer\";\nimport spaceCraftReducer from \"./modules/spacecraft/spaceCraftReducer\";\n\nconst reducer = {\n  planetReducer,\n  spaceReducer,\n  spaceCraftReducer\n};\nexport default reducer;","import planetStore from \"./planetStore\";\nimport {CREATE_PLANET, DELETE_PLANET} from \"./planetTypes\";\n\nconst planetReducer = (state = { ...planetStore }, action) => {\n  switch (action.type) {\n    case `${CREATE_PLANET}_FULFILLED`:\n      console.log('create planet');\n      break;\n    case DELETE_PLANET:\n      console.log('delete planet');\n      break;\n    default:\n      break;\n  }\n  return state;\n};\n\nexport default planetReducer;","const spaceReducer = (state = {}, action) => {\n  switch (action.type) {\n    case 'CREATE_SPACE':\n      break;\n    case 'DELETE_SPACE':\n      break;\n    default:\n      break;\n  }\n  return state;\n};\n\nexport default spaceReducer;","const spaceCraftReducer = (state = {}, action) => {\n  switch (action.type) {\n    case 'CREATE_SPACECRAFT':\n      break;\n    case 'DELETE_SPACECRAFT':\n      break;\n    default:\n      break;\n  }\n  return state;\n};\n\nexport default spaceCraftReducer;","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport reducer from './reducer';\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport promise from 'redux-promise-middleware';\n\nexport default createStore(\n  combineReducers({...reducer}),\n  {},\n  applyMiddleware(logger, thunk, promise)\n);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}